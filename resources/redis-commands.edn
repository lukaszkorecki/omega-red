{:xinfo.groups {:command :xinfo.groups, :summary "Returns a list of the consumer groups of a stream.", :arguments ("key"), :num-args 3, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :exists {:command :exists, :summary "Determines whether one or more keys exist.", :arguments ("key"), :num-args 2, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :del {:command :del, :summary "Deletes one or more keys.", :arguments ("key"), :num-args 2, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :lmpop {:command :lmpop, :summary "Returns multiple elements from a list after removing them. Deletes the list if the last element was popped.", :arguments ("numkeys" "key" "where" "count"), :num-args 4, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :bitfield_ro {:command :bitfield_ro, :summary "Performs arbitrary read-only bitfield integer operations on strings.", :arguments ("key" "get-block"), :num-args 2, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :xgroup.create {:command :xgroup.create, :summary "Creates a consumer group.", :arguments ("key" "group" "id-selector" "mkstream" "entries-read"), :num-args 5, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :fcall_ro {:command :fcall_ro, :summary "Invokes a read-only function.", :arguments ("function" "numkeys" "key" "arg"), :num-args 3, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :zscan {:command :zscan, :summary "Iterates over members and scores of a sorted set.", :arguments ("key" "cursor" "pattern" "count"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :zremrangebyrank {:command :zremrangebyrank, :summary "Removes members in a sorted set within a range of indexes. Deletes the sorted set if all members were removed.", :arguments ("key" "start" "stop"), :num-args 4, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :lpushx {:command :lpushx, :summary "Prepends one or more elements to a list only when the list exists.", :arguments ("key" "element"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :georadius_ro {:command :georadius_ro, :summary "Returns members from a geospatial index that are within a distance from a coordinate.", :arguments ("key" "longitude" "latitude" "radius" "unit" "withcoord" "withdist" "withhash" "count-block" "order"), :num-args 6, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :mget {:command :mget, :summary "Atomically returns the string values of one or more keys.", :arguments ("key"), :num-args 2, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :bitcount {:command :bitcount, :summary "Counts the number of set bits (population counting) in a string.", :arguments ("key" "range"), :num-args 2, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :geoadd {:command :geoadd, :summary "Adds one or more members to a geospatial index. The key is created if it doesn't exist.", :arguments ("key" "condition" "change" "data"), :num-args 5, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :geopos {:command :geopos, :summary "Returns the longitude and latitude of members from a geospatial index.", :arguments ("key" "member"), :num-args 2, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :getex {:command :getex, :summary "Returns the string value of a key after setting its expiration time.", :arguments ("key" "expiration"), :num-args 2, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :zunionstore {:command :zunionstore, :summary "Stores the union of multiple sorted sets in a key.", :arguments ("destination" "numkeys" "key" "weight" "aggregate"), :num-args 4, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :get {:command :get, :summary "Returns the string value of a key.", :arguments ("key"), :num-args 2, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :ltrim {:command :ltrim, :summary "Removes elements from both ends a list. Deletes the list if all elements were trimmed.", :arguments ("key" "start" "stop"), :num-args 4, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :copy {:command :copy, :summary "Copies the value of a key to a new key.", :arguments ("source" "destination" "destination-db" "replace"), :num-args 3, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :sunionstore {:command :sunionstore, :summary "Stores the union of multiple sets in a key.", :arguments ("destination" "key"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :expireat {:command :expireat, :summary "Sets the expiration time of a key to a Unix timestamp.", :arguments ("key" "unix-time-seconds" "condition"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :zdiff {:command :zdiff, :summary "Returns the difference between multiple sorted sets.", :arguments ("numkeys" "key" "withscores"), :num-args 3, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :xgroup.setid {:command :xgroup.setid, :summary "Sets the last-delivered ID of a consumer group.", :arguments ("key" "group" "id-selector" "entriesread"), :num-args 5, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :zrevrank {:command :zrevrank, :summary "Returns the index of a member in a sorted set ordered by descending scores.", :arguments ("key" "member" "withscore"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :smismember {:command :smismember, :summary "Determines whether multiple members belong to a set.", :arguments ("key" "member"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :xinfo.stream {:command :xinfo.stream, :summary "Returns information about a stream.", :arguments ("key" "full-block"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :strlen {:command :strlen, :summary "Returns the length of a string value.", :arguments ("key"), :num-args 2, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :zpopmin {:command :zpopmin, :summary "Returns the lowest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped.", :arguments ("key" "count"), :num-args 2, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :lrange {:command :lrange, :summary "Returns a range of elements from a list.", :arguments ("key" "start" "stop"), :num-args 4, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :hincrby {:command :hincrby, :summary "Increments the integer value of a field in a hash by a number. Uses 0 as initial value if the field doesn't exist.", :arguments ("key" "field" "increment"), :num-args 4, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :zrank {:command :zrank, :summary "Returns the index of a member in a sorted set ordered by ascending scores.", :arguments ("key" "member" "withscore"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :setrange {:command :setrange, :summary "Overwrites a part of a string value with another by an offset. Creates the key if it doesn't exist.", :arguments ("key" "offset" "value"), :num-args 4, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :bzpopmin {:command :bzpopmin, :summary "Removes and returns the member with the lowest score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.", :arguments ("key" "timeout"), :num-args 3, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :sismember {:command :sismember, :summary "Determines whether a member belongs to a set.", :arguments ("key" "member"), :num-args 3, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :sinterstore {:command :sinterstore, :summary "Stores the intersect of multiple sets in a key.", :arguments ("destination" "key"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :xgroup.delconsumer {:command :xgroup.delconsumer, :summary "Deletes a consumer from a consumer group.", :arguments ("key" "group" "consumer"), :num-args 5, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :hset {:command :hset, :summary "Creates or modifies the value of a field in a hash.", :arguments ("key" "data"), :num-args 4, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :expiretime {:command :expiretime, :summary "Returns the expiration time of a key as a Unix timestamp.", :arguments ("key"), :num-args 2, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :pttl {:command :pttl, :summary "Returns the expiration time in milliseconds of a key.", :arguments ("key"), :num-args 2, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :zincrby {:command :zincrby, :summary "Increments the score of a member in a sorted set.", :arguments ("key" "increment" "member"), :num-args 4, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :xdel {:command :xdel, :summary "Returns the number of messages after removing them from a stream.", :arguments ("key" "id"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :zcard {:command :zcard, :summary "Returns the number of members in a sorted set.", :arguments ("key"), :num-args 2, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :hvals {:command :hvals, :summary "Returns all values in a hash.", :arguments ("key"), :num-args 2, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :blmove {:command :blmove, :summary "Pops an element from a list, pushes it to another list and returns it. Blocks until an element is available otherwise. Deletes the list if the last element was moved.", :arguments ("source" "destination" "wherefrom" "whereto" "timeout"), :num-args 6, :variadic? false, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :incr {:command :incr, :summary "Increments the integer value of a key by one. Uses 0 as initial value if the key doesn't exist.", :arguments ("key"), :num-args 2, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :linsert {:command :linsert, :summary "Inserts an element before or after another element in a list.", :arguments ("key" "where" "pivot" "element"), :num-args 5, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :zintercard {:command :zintercard, :summary "Returns the number of members of the intersect of multiple sorted sets.", :arguments ("numkeys" "key" "limit"), :num-args 3, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :rpushx {:command :rpushx, :summary "Appends an element to a list only when the list exists.", :arguments ("key" "element"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :pfcount {:command :pfcount, :summary "Returns the approximated cardinality of the set(s) observed by the HyperLogLog key(s).", :arguments ("key"), :num-args 2, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :object.refcount {:command :object.refcount, :summary "Returns the reference count of a value of a key.", :arguments ("key"), :num-args 3, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :zrangebylex {:command :zrangebylex, :summary "Returns members in a sorted set within a lexicographical range.", :arguments ("key" "min" "max" "limit"), :num-args 4, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :geohash {:command :geohash, :summary "Returns members from a geospatial index as geohash strings.", :arguments ("key" "member"), :num-args 2, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :xsetid {:command :xsetid, :summary "An internal command for replicating stream values.", :arguments ("key" "last-id" "entries-added" "max-deleted-id"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :sadd {:command :sadd, :summary "Adds one or more members to a set. Creates the key if it doesn't exist.", :arguments ("key" "member"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :restore {:command :restore, :summary "Creates a key from the serialized representation of a value.", :arguments ("key" "ttl" "serialized-value" "replace" "absttl" "seconds" "frequency"), :num-args 4, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :geodist {:command :geodist, :summary "Returns the distance between two members of a geospatial index.", :arguments ("key" "member1" "member2" "unit"), :num-args 4, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :zadd {:command :zadd, :summary "Adds one or more members to a sorted set, or updates their scores. Creates the key if it doesn't exist.", :arguments ("key" "condition" "comparison" "change" "increment" "data"), :num-args 4, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :scard {:command :scard, :summary "Returns the number of members in a set.", :arguments ("key"), :num-args 2, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :eval_ro {:command :eval_ro, :summary "Executes a read-only server-side Lua script.", :arguments ("script" "numkeys" "key" "arg"), :num-args 3, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :hscan {:command :hscan, :summary "Iterates over fields and values of a hash.", :arguments ("key" "cursor" "pattern" "count"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :zcount {:command :zcount, :summary "Returns the count of members in a sorted set that have scores within a range.", :arguments ("key" "min" "max"), :num-args 4, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :migrate {:command :migrate, :summary "Atomically transfers a key from one Redis instance to another.", :arguments ("host" "port" "key-selector" "destination-db" "timeout" "copy" "replace" "authentication" "keys"), :num-args 6, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :geosearchstore {:command :geosearchstore, :summary "Queries a geospatial index for members inside an area of a box or a circle, optionally stores the result.", :arguments ("destination" "source" "from" "by" "order" "count-block" "storedist"), :num-args 8, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :substr {:command :substr, :summary "Returns a substring from a string value.", :arguments ("key" "start" "end"), :num-args 4, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :sintercard {:command :sintercard, :summary "Returns the number of members of the intersect of multiple sets.", :arguments ("numkeys" "key" "limit"), :num-args 3, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :hget {:command :hget, :summary "Returns the value of a field in a hash.", :arguments ("key" "field"), :num-args 3, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :append {:command :append, :summary "Appends a string to the value of a key. Creates the key if it doesn't exist.", :arguments ("key" "value"), :num-args 3, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :move {:command :move, :summary "Moves a key to another database.", :arguments ("key" "db"), :num-args 3, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :hexists {:command :hexists, :summary "Determines whether a field exists in a hash.", :arguments ("key" "field"), :num-args 3, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :renamenx {:command :renamenx, :summary "Renames a key only when the target key name doesn't exist.", :arguments ("key" "newkey"), :num-args 3, :variadic? false, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :lpos {:command :lpos, :summary "Returns the index of matching elements in a list.", :arguments ("key" "element" "rank" "num-matches" "len"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :hmget {:command :hmget, :summary "Returns the values of all fields in a hash.", :arguments ("key" "field"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :lset {:command :lset, :summary "Sets the value of an element in a list by its index.", :arguments ("key" "index" "element"), :num-args 4, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :lindex {:command :lindex, :summary "Returns an element from a list by its index.", :arguments ("key" "index"), :num-args 3, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :persist {:command :persist, :summary "Removes the expiration time of a key.", :arguments ("key"), :num-args 2, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :getset {:command :getset, :summary "Returns the previous string value of a key after setting it to a new value.", :arguments ("key" "value"), :num-args 3, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :zrem {:command :zrem, :summary "Removes one or more members from a sorted set. Deletes the sorted set if all members were removed.", :arguments ("key" "member"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :type {:command :type, :summary "Determines the type of value stored at a key.", :arguments ("key"), :num-args 2, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :xautoclaim {:command :xautoclaim, :summary "Changes, or acquires, ownership of messages in a consumer group, as if the messages were delivered to as consumer group member.", :arguments ("key" "group" "consumer" "min-idle-time" "start" "count" "justid"), :num-args 6, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :setnx {:command :setnx, :summary "Set the string value of a key only when the key doesn't exist.", :arguments ("key" "value"), :num-args 3, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :expire {:command :expire, :summary "Sets the expiration time of a key in seconds.", :arguments ("key" "seconds" "condition"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :srandmember {:command :srandmember, :summary "Get one or multiple random members from a set", :arguments ("key" "count"), :num-args 2, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :rename {:command :rename, :summary "Renames a key and overwrites the destination.", :arguments ("key" "newkey"), :num-args 3, :variadic? false, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :georadiusbymember {:command :georadiusbymember, :summary "Queries a geospatial index for members within a distance from a member, optionally stores the result.", :arguments ("key" "member" "radius" "unit" "withcoord" "withdist" "withhash" "count-block" "order" "store"), :num-args 5, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :object.idletime {:command :object.idletime, :summary "Returns the time since the last access to a Redis object.", :arguments ("key"), :num-args 3, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :lcs {:command :lcs, :summary "Finds the longest common substring.", :arguments ("key1" "key2" "len" "idx" "min-match-len" "withmatchlen"), :num-args 3, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :pfadd {:command :pfadd, :summary "Adds elements to a HyperLogLog key. Creates the key if it doesn't exist.", :arguments ("key" "element"), :num-args 2, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :smembers {:command :smembers, :summary "Returns all members of a set.", :arguments ("key"), :num-args 2, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :bitpos {:command :bitpos, :summary "Finds the first set (1) or clear (0) bit in a string.", :arguments ("key" "bit" "range"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :hincrbyfloat {:command :hincrbyfloat, :summary "Increments the floating point value of a field by a number. Uses 0 as initial value if the field doesn't exist.", :arguments ("key" "field" "increment"), :num-args 4, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :bitop {:command :bitop, :summary "Performs bitwise operations on multiple strings, and stores the result.", :arguments ("operation" "destkey" "key"), :num-args 4, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :xpending {:command :xpending, :summary "Returns the information and entries from a stream consumer group's pending entries list.", :arguments ("key" "group" "filters"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :sort_ro {:command :sort_ro, :summary "Returns the sorted elements of a list, a set, or a sorted set.", :arguments ("key" "by-pattern" "limit" "get-pattern" "order" "sorting"), :num-args 2, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :srem {:command :srem, :summary "Removes one or more members from a set. Deletes the set if the last member was removed.", :arguments ("key" "member"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :xadd {:command :xadd, :summary "Appends a new message to a stream. Creates the key if it doesn't exist.", :arguments ("key" "nomkstream" "trim" "id-selector" "data"), :num-args 5, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :zremrangebylex {:command :zremrangebylex, :summary "Removes members in a sorted set within a lexicographical range. Deletes the sorted set if all members were removed.", :arguments ("key" "min" "max"), :num-args 4, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :hkeys {:command :hkeys, :summary "Returns all fields in a hash.", :arguments ("key"), :num-args 2, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :evalsha_ro {:command :evalsha_ro, :summary "Executes a read-only server-side Lua script by SHA1 digest.", :arguments ("sha1" "numkeys" "key" "arg"), :num-args 3, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :zrandmember {:command :zrandmember, :summary "Returns one or more random members from a sorted set.", :arguments ("key" "options"), :num-args 2, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :xrevrange {:command :xrevrange, :summary "Returns the messages from a stream within a range of IDs in reverse order.", :arguments ("key" "end" "start" "count"), :num-args 4, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :xclaim {:command :xclaim, :summary "Changes, or acquires, ownership of a message in a consumer group, as if the message was delivered a consumer group member.", :arguments ("key" "group" "consumer" "min-idle-time" "id" "ms" "unix-time-milliseconds" "count" "force" "justid" "lastid"), :num-args 6, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :zlexcount {:command :zlexcount, :summary "Returns the number of members in a sorted set within a lexicographical range.", :arguments ("key" "min" "max"), :num-args 4, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :incrbyfloat {:command :incrbyfloat, :summary "Increment the floating point value of a key by a number. Uses 0 as initial value if the key doesn't exist.", :arguments ("key" "increment"), :num-args 3, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :rpush {:command :rpush, :summary "Appends one or more elements to a list. Creates the key if it doesn't exist.", :arguments ("key" "element"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :blmpop {:command :blmpop, :summary "Pops the first element from one of multiple lists. Blocks until an element is available otherwise. Deletes the list if the last element was popped.", :arguments ("timeout" "numkeys" "key" "where" "count"), :num-args 5, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :xreadgroup {:command :xreadgroup, :summary "Returns new or historical messages from a stream for a consumer in a group. Blocks until a message is available otherwise.", :arguments ("group-block" "count" "milliseconds" "noack" "streams"), :num-args 7, :variadic? true, :has-only-one-key-arg? nil, :has-variadic-key-args? false, :has-block-key-args? true}, :sinter {:command :sinter, :summary "Returns the intersect of multiple sets.", :arguments ("key"), :num-args 2, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :sunion {:command :sunion, :summary "Returns the union of multiple sets.", :arguments ("key"), :num-args 2, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :object.freq {:command :object.freq, :summary "Returns the logarithmic access frequency counter of a Redis object.", :arguments ("key"), :num-args 3, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :llen {:command :llen, :summary "Returns the length of a list.", :arguments ("key"), :num-args 2, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :pexpire {:command :pexpire, :summary "Sets the expiration time of a key in milliseconds.", :arguments ("key" "milliseconds" "condition"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :ttl {:command :ttl, :summary "Returns the expiration time in seconds of a key.", :arguments ("key"), :num-args 2, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :geosearch {:command :geosearch, :summary "Queries a geospatial index for members inside an area of a box or a circle.", :arguments ("key" "from" "by" "order" "count-block" "withcoord" "withdist" "withhash"), :num-args 7, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :xlen {:command :xlen, :summary "Return the number of messages in a stream.", :arguments ("key"), :num-args 2, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :hrandfield {:command :hrandfield, :summary "Returns one or more random fields from a hash.", :arguments ("key" "options"), :num-args 2, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :georadius {:command :georadius, :summary "Queries a geospatial index for members within a distance from a coordinate, optionally stores the result.", :arguments ("key" "longitude" "latitude" "radius" "unit" "withcoord" "withdist" "withhash" "count-block" "order" "store"), :num-args 6, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :hsetnx {:command :hsetnx, :summary "Sets the value of a field in a hash only when the field doesn't exist.", :arguments ("key" "field" "value"), :num-args 4, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :sscan {:command :sscan, :summary "Iterates over members of a set.", :arguments ("key" "cursor" "pattern" "count"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :bzmpop {:command :bzmpop, :summary "Removes and returns a member by score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.", :arguments ("timeout" "numkeys" "key" "where" "count"), :num-args 5, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :pexpireat {:command :pexpireat, :summary "Sets the expiration time of a key to a Unix milliseconds timestamp.", :arguments ("key" "unix-time-milliseconds" "condition"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :hlen {:command :hlen, :summary "Returns the number of fields in a hash.", :arguments ("key"), :num-args 2, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :zrevrangebylex {:command :zrevrangebylex, :summary "Returns members in a sorted set within a lexicographical range in reverse order.", :arguments ("key" "max" "min" "limit"), :num-args 4, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :decrby {:command :decrby, :summary "Decrements a number from the integer value of a key. Uses 0 as initial value if the key doesn't exist.", :arguments ("key" "decrement"), :num-args 3, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :lmove {:command :lmove, :summary "Returns an element after popping it from one list and pushing it to another. Deletes the list if the last element was moved.", :arguments ("source" "destination" "wherefrom" "whereto"), :num-args 5, :variadic? false, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :lpush {:command :lpush, :summary "Prepends one or more elements to a list. Creates the key if it doesn't exist.", :arguments ("key" "element"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :getrange {:command :getrange, :summary "Returns a substring of the string stored at a key.", :arguments ("key" "start" "end"), :num-args 4, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :msetnx {:command :msetnx, :summary "Atomically modifies the string values of one or more keys only when all keys don't exist.", :arguments ("data"), :num-args 3, :variadic? true, :has-only-one-key-arg? nil, :has-variadic-key-args? false, :has-block-key-args? true}, :restore-asking {:command :restore-asking, :summary "An internal command for migrating keys in a cluster.", :arguments ("key" "ttl" "serialized-value" "replace" "absttl" "seconds" "frequency"), :num-args 4, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :georadiusbymember_ro {:command :georadiusbymember_ro, :summary "Returns members from a geospatial index that are within a distance from a member.", :arguments ("key" "member" "radius" "unit" "withcoord" "withdist" "withhash" "count-block" "order"), :num-args 5, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :blpop {:command :blpop, :summary "Removes and returns the first element in a list. Blocks until an element is available otherwise. Deletes the list if the last element was popped.", :arguments ("key" "timeout"), :num-args 3, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :lpop {:command :lpop, :summary "Returns the first elements in a list after removing it. Deletes the list if the last element was popped.", :arguments ("key" "count"), :num-args 2, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :zpopmax {:command :zpopmax, :summary "Returns the highest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped.", :arguments ("key" "count"), :num-args 2, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :touch {:command :touch, :summary "Returns the number of existing keys out of those specified after updating the time they were last accessed.", :arguments ("key"), :num-args 2, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :zdiffstore {:command :zdiffstore, :summary "Stores the difference of multiple sorted sets in a key.", :arguments ("destination" "numkeys" "key"), :num-args 4, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :watch {:command :watch, :summary "Monitors changes to keys to determine the execution of a transaction.", :arguments ("key"), :num-args 2, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :smove {:command :smove, :summary "Moves a member from one set to another.", :arguments ("source" "destination" "member"), :num-args 4, :variadic? false, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :zrevrange {:command :zrevrange, :summary "Returns members in a sorted set within a range of indexes in reverse order.", :arguments ("key" "start" "stop" "withscores"), :num-args 4, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :xinfo.consumers {:command :xinfo.consumers, :summary "Returns a list of the consumers in a consumer group.", :arguments ("key" "group"), :num-args 4, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :sdiffstore {:command :sdiffstore, :summary "Stores the difference of multiple sets in a key.", :arguments ("destination" "key"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :xgroup.createconsumer {:command :xgroup.createconsumer, :summary "Creates a consumer in a consumer group.", :arguments ("key" "group" "consumer"), :num-args 5, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :zinter {:command :zinter, :summary "Returns the intersect of multiple sorted sets.", :arguments ("numkeys" "key" "weight" "aggregate" "withscores"), :num-args 3, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :object.encoding {:command :object.encoding, :summary "Returns the internal encoding of a Redis object.", :arguments ("key"), :num-args 3, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :zrangebyscore {:command :zrangebyscore, :summary "Returns members in a sorted set within a range of scores.", :arguments ("key" "min" "max" "withscores" "limit"), :num-args 4, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :evalsha {:command :evalsha, :summary "Executes a server-side Lua script by SHA1 digest.", :arguments ("sha1" "numkeys" "key" "arg"), :num-args 3, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :brpop {:command :brpop, :summary "Removes and returns the last element in a list. Blocks until an element is available otherwise. Deletes the list if the last element was popped.", :arguments ("key" "timeout"), :num-args 3, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :sdiff {:command :sdiff, :summary "Returns the difference of multiple sets.", :arguments ("key"), :num-args 2, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :hstrlen {:command :hstrlen, :summary "Returns the length of the value of a field.", :arguments ("key" "field"), :num-args 3, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :zrevrangebyscore {:command :zrevrangebyscore, :summary "Returns members in a sorted set within a range of scores in reverse order.", :arguments ("key" "max" "min" "withscores" "limit"), :num-args 4, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :lrem {:command :lrem, :summary "Removes elements from a list. Deletes the list if the last element was removed.", :arguments ("key" "count" "element"), :num-args 4, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :setbit {:command :setbit, :summary "Sets or clears the bit at offset of the string value. Creates the key if it doesn't exist.", :arguments ("key" "offset" "value"), :num-args 4, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :spop {:command :spop, :summary "Returns one or more random members from a set after removing them. Deletes the set if the last member was popped.", :arguments ("key" "count"), :num-args 2, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :zunion {:command :zunion, :summary "Returns the union of multiple sorted sets.", :arguments ("numkeys" "key" "weight" "aggregate" "withscores"), :num-args 3, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :incrby {:command :incrby, :summary "Increments the integer value of a key by a number. Uses 0 as initial value if the key doesn't exist.", :arguments ("key" "increment"), :num-args 3, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :zmscore {:command :zmscore, :summary "Returns the score of one or more members in a sorted set.", :arguments ("key" "member"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :rpop {:command :rpop, :summary "Returns and removes the last elements of a list. Deletes the list if the last element was popped.", :arguments ("key" "count"), :num-args 2, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :zrangestore {:command :zrangestore, :summary "Stores a range of members from sorted set in a key.", :arguments ("dst" "src" "min" "max" "sortby" "rev" "limit"), :num-args 5, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :zrange {:command :zrange, :summary "Returns members in a sorted set within a range of indexes.", :arguments ("key" "start" "stop" "sortby" "rev" "limit" "withscores"), :num-args 4, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :zremrangebyscore {:command :zremrangebyscore, :summary "Removes members in a sorted set within a range of scores. Deletes the sorted set if all members were removed.", :arguments ("key" "min" "max"), :num-args 4, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :mset {:command :mset, :summary "Atomically creates or modifies the string values of one or more keys.", :arguments ("data"), :num-args 3, :variadic? true, :has-only-one-key-arg? nil, :has-variadic-key-args? false, :has-block-key-args? true}, :bitfield {:command :bitfield, :summary "Performs arbitrary bitfield integer operations on strings.", :arguments ("key" "operation"), :num-args 2, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :rpoplpush {:command :rpoplpush, :summary "Returns the last element of a list after removing and pushing it to another list. Deletes the list if the last element was popped.", :arguments ("source" "destination"), :num-args 3, :variadic? false, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :setex {:command :setex, :summary "Sets the string value and expiration time of a key. Creates the key if it doesn't exist.", :arguments ("key" "seconds" "value"), :num-args 4, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :set {:command :set, :summary "Sets the string value of a key, ignoring its type. The key is created if it doesn't exist.", :arguments ("key" "value" "condition" "get" "expiration"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :xgroup.destroy {:command :xgroup.destroy, :summary "Destroys a consumer group.", :arguments ("key" "group"), :num-args 4, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :zscore {:command :zscore, :summary "Returns the score of a member in a sorted set.", :arguments ("key" "member"), :num-args 3, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :xrange {:command :xrange, :summary "Returns the messages from a stream within a range of IDs.", :arguments ("key" "start" "end" "count"), :num-args 4, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :brpoplpush {:command :brpoplpush, :summary "Pops an element from a list, pushes it to another list and returns it. Block until an element is available otherwise. Deletes the list if the last element was popped.", :arguments ("source" "destination" "timeout"), :num-args 4, :variadic? false, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :pfdebug {:command :pfdebug, :summary "Internal commands for debugging HyperLogLog values.", :arguments ("subcommand" "key"), :num-args 3, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :xtrim {:command :xtrim, :summary "Deletes messages from the beginning of a stream.", :arguments ("key" "trim"), :num-args 4, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :zmpop {:command :zmpop, :summary "Returns the highest- or lowest-scoring members from one or more sorted sets after removing them. Deletes the sorted set if the last member was popped.", :arguments ("numkeys" "key" "where" "count"), :num-args 4, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :dump {:command :dump, :summary "Returns a serialized representation of the value stored at a key.", :arguments ("key"), :num-args 2, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :xack {:command :xack, :summary "Returns the number of messages that were successfully acknowledged by the consumer group member of a stream.", :arguments ("key" "group" "id"), :num-args 4, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :bzpopmax {:command :bzpopmax, :summary "Removes and returns the member with the highest score from one or more sorted sets. Blocks until a member available otherwise.  Deletes the sorted set if the last element was popped.", :arguments ("key" "timeout"), :num-args 3, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :hmset {:command :hmset, :summary "Sets the values of multiple fields.", :arguments ("key" "data"), :num-args 4, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :hgetall {:command :hgetall, :summary "Returns all fields and values in a hash.", :arguments ("key"), :num-args 2, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :getbit {:command :getbit, :summary "Returns a bit value by offset.", :arguments ("key" "offset"), :num-args 3, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :memory.usage {:command :memory.usage, :summary "Estimates the memory usage of a key.", :arguments ("key" "count"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :unlink {:command :unlink, :summary "Asynchronously deletes one or more keys.", :arguments ("key"), :num-args 2, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :hdel {:command :hdel, :summary "Deletes one or more fields and their values from a hash. Deletes the hash if no fields remain.", :arguments ("key" "field"), :num-args 3, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :pexpiretime {:command :pexpiretime, :summary "Returns the expiration time of a key as a Unix milliseconds timestamp.", :arguments ("key"), :num-args 2, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :decr {:command :decr, :summary "Decrements the integer value of a key by one. Uses 0 as initial value if the key doesn't exist.", :arguments ("key"), :num-args 2, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :sort {:command :sort, :summary "Sorts the elements in a list, a set, or a sorted set, optionally storing the result.", :arguments ("key" "by-pattern" "limit" "get-pattern" "order" "sorting" "destination"), :num-args 2, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :zinterstore {:command :zinterstore, :summary "Stores the intersect of multiple sorted sets in a key.", :arguments ("destination" "numkeys" "key" "weight" "aggregate"), :num-args 4, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :getdel {:command :getdel, :summary "Returns the string value of a key after deleting the key.", :arguments ("key"), :num-args 2, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :xread {:command :xread, :summary "Returns messages from multiple streams with IDs greater than the ones requested. Blocks until a message is available otherwise.", :arguments ("count" "milliseconds" "streams"), :num-args 4, :variadic? true, :has-only-one-key-arg? nil, :has-variadic-key-args? false, :has-block-key-args? true}, :psetex {:command :psetex, :summary "Sets both string value and expiration time in milliseconds of a key. The key is created if it doesn't exist.", :arguments ("key" "milliseconds" "value"), :num-args 4, :variadic? false, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :fcall {:command :fcall, :summary "Invokes a function.", :arguments ("function" "numkeys" "key" "arg"), :num-args 3, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}, :pfmerge {:command :pfmerge, :summary "Merges one or more HyperLogLog values into a single key.", :arguments ("destkey" "sourcekey"), :num-args 2, :variadic? true, :has-only-one-key-arg? true, :has-variadic-key-args? false, :has-block-key-args? nil}, :eval {:command :eval, :summary "Executes a server-side Lua script.", :arguments ("script" "numkeys" "key" "arg"), :num-args 3, :variadic? true, :has-only-one-key-arg? false, :has-variadic-key-args? true, :has-block-key-args? nil}}